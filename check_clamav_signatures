#!/usr/bin/env bash

#
# check_clamav_signatures - Nagios plugin to monitor ClamAV signatures are up to date.
#
# Released under the MIT License.
#
# https://github.com/tommarshall/nagios-check-clamav-signatures
#

VERSION=0.1.0
OK=0
WARNING=1
CRITICAL=2
UNKNOWN=3
CLAM_LIB_DIR=/var/lib/clamav
NUMERICAL_REGEX='^[0-9]+$'
EXPIRY_THRESHOLD='90 minutes'
STATE_FILE_DIR=/var/lib/nagios
STATE_FILE_NAME=.check_clamav_signatures_ok

#
# Output version.
#

version() {
  echo "check_clamav_signatures $VERSION"
}

#
# Output usage information.
#

usage() {
  echo 'Usage: ./check_clamav_signatures [options]'
}

#
# Output help information.
#

help() {
  usage
  cat <<-EOF

  Examples:
    ./check_clamav_signatures

    ./check_clamav_signatures --expiry '1 day'

  Options:
    -e, --expiry <duration>      duration before the daily signatures are considered expired
    -l, --clam-lib-path <dir>    path to ClamAV lib directory, default: $CLAM_LIB_DIR
    -s, --state-file-path <dir>  path to state file directory, default: $STATE_FILE_DIR
    -V, --version                output version
    -h, --help                   output help information

  -e/--expiry should be a human readable duration, e.g. '1 hour', or '7 days'.

  For more information, see https://github.com/tommarshall/nagios-check-clamav-signatures

EOF
}

#
# Parse argv.
#

while test $# -ne 0; do
  ARG=$1; shift
  case $ARG in
    -e|--expiry) EXPIRY_THRESHOLD=$1; shift ;;
    -l|--clam-lib-path) CLAM_LIB_DIR=$1; shift ;;
    -s|--state-file-path) STATE_FILE_DIR=$1; shift ;;
    -V|--version) version; exit ;;
    -h|--help) help; exit ;;
    *)
      echo "UNKNOWN: Unrecognised argument: $ARG"
      usage >&2
      exit $UNKNOWN
      ;;
  esac
done

#
# Showtime.
#

# ensure we have executable dependencies
for dependency in cut host grep sigtool sed; do
  if ! hash $dependency >/dev/null 2>&1; then
    echo "UNKNOWN: Missing dependency: ${dependency}"
    exit $UNKNOWN
  fi
done

# ensure the daily expiry argument is valid
if ! EXPIRY_THRESHOLD_TIMESTAMP="$(date --date="-$EXPIRY_THRESHOLD" +'%s' 2>/dev/null)"; then
  echo "UNKNOWN: Invalid daily expiry duration specified: ${EXPIRY_THRESHOLD}"
  exit $UNKNOWN
fi

# ensure the clam lib dir exists
if [ ! -d "$CLAM_LIB_DIR" ]; then
  echo "UNKNOWN: Unable to locate ClamAV lib directory"
  exit $UNKNOWN
fi

# ensure we have a daily signatures file
if [ -e ${CLAM_LIB_DIR}/daily.cld ]; then
  DAILY_SIGNATURES_PATH="${CLAM_LIB_DIR}/daily.cld"
elif [ -e ${CLAM_LIB_DIR}/daily.cvd ]; then
  DAILY_SIGNATURES_PATH="${CLAM_LIB_DIR}/daily.cvd"
else
  echo "UNKNOWN: Unable to locate installed daily signatures"
  exit $UNKNOWN
fi

# ensure we have a main signatures file
if [ -e ${CLAM_LIB_DIR}/main.cvd ]; then
  MAIN_SIGNATURES_PATH="${CLAM_LIB_DIR}/main.cvd"
elif [ -e ${CLAM_LIB_DIR}/main.cld ]; then
  MAIN_SIGNATURES_PATH="${CLAM_LIB_DIR}/main.cld"
else
  echo "UNKNOWN: Unable to locate installed main signatures"
  exit $UNKNOWN
fi

# extract the daily signatures version
INSTALLED_DAILY_VERSION=$(sigtool -i ${DAILY_SIGNATURES_PATH} 2>/dev/null | grep Version | sed -e 's/Version: //')
if ! [[ $INSTALLED_DAILY_VERSION =~ $NUMERICAL_REGEX ]]; then
  echo "UNKNOWN: Unable to establish installed daily signatures version"
  exit $UNKNOWN
fi

# extract the main signatures version
INSTALLED_MAIN_VERSION=$(sigtool -i ${MAIN_SIGNATURES_PATH} 2>/dev/null | grep Version | sed -e 's/Version: //')
if ! [[ $INSTALLED_MAIN_VERSION =~ $NUMERICAL_REGEX ]]; then
  echo "UNKNOWN: Unable to establish installed main signatures version"
  exit $UNKNOWN
fi

# query the DNS record
DNS_TXT_RECORD=$(host -t txt current.cvd.clamav.net)
if [ $? -ne 0 ]; then
  echo "UNKNOWN: DNS query to current.cvd.clamav.net failed"
  exit $UNKNOWN
fi

# extract the current daily signatures version from the DNS TXT record
CURRENT_DAILY_VERSION=$(echo $DNS_TXT_RECORD | cut -d : -f 3)
if ! [[ $CURRENT_DAILY_VERSION =~ $NUMERICAL_REGEX ]]; then
  echo "UNKNOWN: Unable to establish current daily signatures version from DNS query"
  exit $UNKNOWN
fi

# extract the current main signatures version from the DNS TXT record
CURRENT_MAIN_VERSION=$(echo $DNS_TXT_RECORD | cut -d : -f 2)
if ! [[ $CURRENT_MAIN_VERSION =~ $NUMERICAL_REGEX ]]; then
  echo "UNKNOWN: Unable to establish current main signatures version from DNS query"
  exit $UNKNOWN
fi

# get the last OK timestamp from the state file
LAST_OK_TIMESTAMP="$(stat --format='%Y' $STATE_FILE_DIR/$STATE_FILE_NAME 2>/dev/null || echo '0')"

# determine the difference between the current and installed versions
DAILY_VERSION_DELTA=$((CURRENT_DAILY_VERSION-INSTALLED_DAILY_VERSION))
MAIN_VERSION_DELTA=$((CURRENT_MAIN_VERSION-INSTALLED_MAIN_VERSION))

if [ $MAIN_VERSION_DELTA -gt 0 ]; then
  echo "CRITICAL: Signatures expired;" \
    "daily version: ${INSTALLED_DAILY_VERSION} (${DAILY_VERSION_DELTA} behind)," \
    "main version: ${INSTALLED_MAIN_VERSION} (${MAIN_VERSION_DELTA} behind)"
  exit $CRITICAL
elif [ $DAILY_VERSION_DELTA -gt 0 ]; then
  if [ $LAST_OK_TIMESTAMP -gt $EXPIRY_THRESHOLD_TIMESTAMP ]; then
    echo "OK: Signatures expired, but within expiry threshold;" \
      "daily version: ${INSTALLED_DAILY_VERSION} (${DAILY_VERSION_DELTA} behind)," \
      "main version: ${INSTALLED_MAIN_VERSION} (${MAIN_VERSION_DELTA} behind)"
    exit $OK
  fi
  echo "CRITICAL: Signatures expired;" \
    "daily version: ${INSTALLED_DAILY_VERSION} (${DAILY_VERSION_DELTA} behind)," \
    "main version: ${INSTALLED_MAIN_VERSION} (${MAIN_VERSION_DELTA} behind)"
  exit $CRITICAL
fi

# modify the timestamp on the state file
if ! touch $STATE_FILE_DIR/$STATE_FILE_NAME 2>/dev/null; then
  echo "OK: Signatures up to date, but failed to write state file to ${STATE_FILE_DIR}/${STATE_FILE_NAME}"
  exit $OK
fi

echo "OK: Signatures up to date;"\
  "daily version: ${INSTALLED_DAILY_VERSION}," \
  "main version: ${INSTALLED_MAIN_VERSION}"
exit $OK
